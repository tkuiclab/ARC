#include <ros/ros.h>
#include <actionlib/server/simple_action_server.h>
#include <object_poes_estimator/sixD_poseAction.h>

#include <Eigen/Core>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/common/time.h>
#include <pcl/console/print.h>
#include <pcl/features/normal_3d_omp.h>
#include <pcl/features/fpfh_omp.h>
#include <pcl/filters/filter.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/io/pcd_io.h>
#include <pcl/registration/icp.h>
#include <pcl/registration/sample_consensus_prerejective.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/common/centroid.h>

#include <sensor_msgs/PointCloud2.h>
#include <pcl_ros/transforms.h>
#include <pcl_conversions/pcl_conversions.h>
#include <boost/thread/thread.hpp>
#include <string>

// Types
typedef pcl::PointNormal PointNT;
typedef pcl::PointCloud<PointNT> PointCloudT;
typedef pcl::FPFHSignature33 FeatureT;
typedef pcl::FPFHEstimationOMP<PointNT,PointNT,FeatureT> FeatureEstimationT;
typedef pcl::PointCloud<FeatureT> FeatureCloudT;
typedef pcl::visualization::PointCloudColorHandlerCustom<PointNT> ColorHandlerT;

namespace ObjEstAction_namespace
{

class ObjEstAction
{
public:

  ObjEstAction(std::string name) :
    as_(nh_, name, false),
    action_name_(name), viewer("Cloud Viewer")
  {
    foto = false;
    ya_foto = false;
    SetInputDirectory("/home/iclab-ming/3d_ws/src/object_poes_estimator/pcd_file/");
    as_.registerGoalCallback(boost::bind(&ObjEstAction::goalCB, this));
    as_.registerPreemptCallback(boost::bind(&ObjEstAction::preemptCB, this));

    cloud_sub = nh_.subscribe("/camera/depth/points", 1, &ObjEstAction::cloud_cb,this);
    as_.start();
  }

  void goalCB();
  void preemptCB();
  void cloud_cb(const sensor_msgs::PointCloud2ConstPtr& input);
  void SetInputDirectory(std::string outdir);

protected:
  ros::NodeHandle nh_;
  ros::Subscriber cloud_sub;

  actionlib::SimpleActionServer<object_poes_estimator::sixD_poseAction> as_;
  std::string action_name_;

  object_poes_estimator::sixD_poseAction feedback_;
  object_poes_estimator::sixD_poseResult result_;

  bool foto;
  bool ya_foto;
  std::string OUT_DIR;

  pcl::PCLPointCloud2 pcl_pc2;
  pcl_conversions::toPCL(*input,pcl_pc2);
  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
  pcl::fromPCLPointCloud2(pcl_pc2,*cloud);
  pcl::visualization::CloudViewer viewer;

};
}
